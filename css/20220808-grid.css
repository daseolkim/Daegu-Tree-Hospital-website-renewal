@charset "utf-8";
*{margin: 0; padding: 0;}
ul{list-style: none;}
a{text-decoration: none; color: #000;}

.content{
    width: 100%;
    height: auto;
}
.content .content-wrap{
    width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(4, 285px);
    grid-template-rows: repeat(2, 285px);
    overflow: hidden;
    gap: 20px;
}
/* 반응형에는 세로값을 주면안된다 컨텐츠길이값만큼 자동으로 늘리기위해 */
.content .content-wrap .content-item{
background-color: #aaa;
}


/* 2차원으로 만들려면 열/행을 정희 해야한다.a3개의 열과 2개의 행을 만들고
grid-template-columns 및 grid-template-rows속성을 사용
같은 열과 행의 원하는 속성을 작성함으로써 레이아웃을 구성한다.


flex - 1차원적 단방향으로 동작 > 가로 혹은 세로
grid - 2차원적 양방향으로 동작 > 가로와 세로

grid-template-rows - 열의 크기를 지정
grid-template-columns - 행의 크기를 지정
반복이 될 시 repeat(반복횟수, 크기)로 지정 가능
반복되지 않을시 해당 크기 만큼 공백으로 작성
예) grid-template-columns :200px 100px 150px (3개행) 

row-gap - 열과 열사이의 여백을 정의
columns-gap - 행과 행 사이의 여백을 정의
grid-gap / gap - 위 두 속성이 합쳐진 속성

grid-row-start - 그리드 아이템의 열 시작 위치를 숫자로 지정
grid-row-end - 그리드 아이템의 열 끝 위치를 숫자로 지정
grid-row - 위 두 속성이 합쳐진 속성

grid-column-start - 그리드 아이템의 행 시작 위치를 숫자로 지정
grid-column-end - 그리드 아이템의 행 끝 위치를 숫자로 지정
grid-column `- 위 두 속성이 합쳐징 속성

order - 배치순서를 지정
z-index - 그리드 쌓이는 순서를 지정
*/


/* -------------------------cotent-2--------------------------- */
.content-2{
    width: 100%;
}
.content-2 .content-wrap{
    width: 1170px;
    margin: 50px auto;
    display: grid;
    gap: 22px;
    grid-template-columns: repeat(4, 276px);
    grid-template-rows:repeat(2, 349px) ;   
}
.content-2 .content-wrap .content-item{
    background-color: orange;
}

.content-2 .content-wrap .content-item:nth-child(1){
    grid-column: 1 / 3;
}
.content-2 .content-wrap .content-item:nth-child(6){
    grid-column: 3 / 5;
}

/* -------------------------cotent-3--------------------------- */
.content-3{
    width: 100%;
}
.content-3 .content-wrap{
    width: 1240px;
    margin: 0 auto;
    gap: 20px;
    display: grid;
    grid-template-columns: repeat(3, 400px);
    grid-template-rows: 100px 400px 200px;
}
.content-3 .content-wrap .content-item{
    background-color: #85a;
}
.content-3 .content-wrap .content-item:nth-child(1){
    grid-column: 1 / 3;
}
.content-3 .content-wrap .content-item:nth-child(3){
    grid-row: 2 / 4;
}
.content-3 .content-wrap .content-item:nth-child(5){
    grid-row: 2 / 4;
    grid-column: 3 / 4;
}
/* -------------------------cotent-4--------------------------- */
.content-4{
    width: 100%;
}
.content-4 .content-wrap{
    width: 1250px;
    margin: 0 auto;
    gap: 10px;
    display: grid;
    grid-template-columns: repeat(6, 200px);
    grid-template-rows:repeat(3, 200px);
}
.content-4 .content-wrap .content-item{
    background-color: #dea;
}
.content-4 .content-wrap .content-item:nth-child(1){
    grid-column: 1 / 3;
}
.content-4 .content-wrap .content-item:nth-child(2){
    grid-row: 1 / 3;
    grid-column: 3 / 4;
}
.content-4 .content-wrap .content-item:nth-child(3){
    grid-column: 4 / 6;
}
.content-4 .content-wrap .content-item:nth-child(7){
    grid-column: 4 / 6;
}
.content-4 .content-wrap .content-item:nth-child(8){
    grid-row: 2 / 4;
    grid-column: 6 / 7;
}
